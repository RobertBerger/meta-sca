#!/usr/bin/env python3
## SPDX-License-Identifier: BSD-2-Clause
## Copyright (c) 2019, Konrad Weihmann

import subprocess
import os
import sys

_data = {
    "bashate": [
        "busybox",
        "openssh"
    ],
    "bitbake": [
        "bad-bitbake"
    ],
    "cppcheck": [
        "busybox",
        "openssh",
        "simple-c"
    ],
    "cpplint": [
        "busybox",
        "openssh",
        "simple-c"
    ],
    "flake8": [
        "bad-python-types",
        "python3-git"
    ],
    "flawfinder": [
        "openssh",
        "simple-c"
    ],
    "flint": [
        "busybox",
        "openssh"
    ],
    "gcc": [
        "busybox",
        "openssh",
        "simple-c"
    ],
    "gixy": [
        "core-image-minimal-scatest"
    ],
    "golint": [
        "bad-go"
    ],
    "jsonlint": [
        "bad-json"
    ],
    "kconfighard": [
        "linux-yocto"
    ],
    "lynis": [
        "core-image-minimal-scatest"
    ],
    "msgcheck": [
        "acl"
    ],
    "mypy": [
        "bad-python-reqs",
        "bad-python-types"
    ],
    "nixauditor": [
        "core-image-minimal-scatest"
    ],
    "oelint": [
        "bad-bitbake"
    ],
    "pscan": [
        "busybox"
    ],
    "pytype": [
        "bad-python-types"
    ],
    "rats": [
        "busybox",
        "openssh",
        "simple-c"
    ],
    "revive": [
        "bad-go"
    ],
    "ropgadget": [
        "busybox"
    ],
    "safety": [
        "bad-python-reqs"
    ],
    "setuptoolslint": [
        "bad-python-reqs"
    ],
    "sparse": [
        "busybox",
        "simple-c"
    ],
    "systemdlint": [
        "core-image-minimal-scatest"
    ],
    "tiger": [
        "core-image-minimal-scatest"
    ],
    "tscancode": [
        "busybox",
        "openssh"
    ],
    "upc": [
        "core-image-minimal-scatest"
    ],
    "xmllint": [
        "bad-xml"
    ],
    "yamllint": [
        "bad-yaml"
    ]
}
ret = 0
script_path = os.path.join(os.path.dirname(__file__), "check_result")
_mods = _data.keys()
if len(sys.argv) > 2:
    _mods = sys.argv[2:]
for k,v in _data.items():
    if k not in _mods:
        continue
    for finding in v:
        try:
            subprocess.check_call([script_path, k, finding, sys.argv[1]])
        except subprocess.CalledProcessError as e:
            ret = -1
sys.exit(ret)